"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const cloc_functions_1 = require("./cloc.functions");
// #copilot - most of the boilerplate of these tests was generated by copilot
describe('runCloc', () => {
    it('should return an array of language statistics', (done) => {
        (0, cloc_functions_1.runClocSummary)('./src').subscribe((stats) => {
            (0, chai_1.expect)(stats instanceof Array).to.be.true;
            (0, chai_1.expect)(stats.length).greaterThan(0);
            (0, chai_1.expect)(!!stats[0].language).to.be.true;
            (0, chai_1.expect)(!!stats[0].nFiles).to.be.true;
            (0, chai_1.expect)(!!stats[0].blank).to.be.true;
            (0, chai_1.expect)(!!stats[0].comment).to.be.true;
            (0, chai_1.expect)(!!stats[0].code).to.be.true;
            done();
        });
    }).timeout(10000);
    it('should return statistics for TypeScript files', (done) => {
        (0, cloc_functions_1.runClocSummary)('./src').subscribe((stats) => {
            const typescriptStats = stats.find((stat) => stat.language === 'TypeScript');
            (0, chai_1.expect)(!!typescriptStats).to.be.true;
            (0, chai_1.expect)(typescriptStats.nFiles).greaterThan(0);
            (0, chai_1.expect)(typescriptStats.blank).greaterThan(0);
            (0, chai_1.expect)(typescriptStats.comment).greaterThan(0);
            (0, chai_1.expect)(typescriptStats.code).greaterThan(0);
            done();
        });
    }).timeout(10000);
    it('should return statistics reading from a git repo commit - the commit is from the repo of this project', (done) => {
        (0, cloc_functions_1.runClocSummary)('2c6f2ae87b539590f5a0f93682f5440ca845bc9c').subscribe((stats) => {
            const typescriptStats = stats.find((stat) => stat.language === 'TypeScript');
            (0, chai_1.expect)(!!typescriptStats).to.be.true;
            (0, chai_1.expect)(typescriptStats.nFiles).greaterThan(0);
            (0, chai_1.expect)(typescriptStats.blank).greaterThan(0);
            (0, chai_1.expect)(typescriptStats.comment).greaterThan(0);
            (0, chai_1.expect)(typescriptStats.code).greaterThan(0);
            done();
        });
    }).timeout(10000);
});
describe('buildOutfileName', () => {
    const thisFolderName = 'git-metrics';
    it('should return the provided output file name if it is provided', () => {
        const outFile = 'output.txt';
        const result = (0, cloc_functions_1.buildOutfileName)(outFile);
        (0, chai_1.expect)(result).to.equal(outFile);
    });
    it('should generate an output file name based on the provided parameters', () => {
        const prefix = 'prefix_';
        const repoFolder = '/path/to/repo';
        const postfix = '_postfix';
        const expected = `${prefix}repo${postfix}`;
        const result = (0, cloc_functions_1.buildOutfileName)('', repoFolder, prefix, postfix);
        (0, chai_1.expect)(result).to.equal(expected);
    });
    it('should use the current working directory name as the base folder name since repo folder is not passed as param', () => {
        const prefix = 'prefix_';
        const postfix = '_postfix';
        const expected = `${prefix}${thisFolderName}${postfix}`;
        const result = (0, cloc_functions_1.buildOutfileName)('', '', prefix, postfix);
        (0, chai_1.expect)(result).to.equal(expected);
    });
    it('should use an empty string as the prefix if prefix is not provided', () => {
        const repoFolder = '/path/to/repo';
        const postfix = '_postfix';
        const expected = `repo${postfix}`;
        const result = (0, cloc_functions_1.buildOutfileName)('', repoFolder, undefined, postfix);
        (0, chai_1.expect)(result).to.equal(expected);
    });
    it('should use an empty string as the postfix if postfix is not provided', () => {
        const prefix = 'prefix_';
        const repoFolder = '/path/to/repo';
        const expected = `${prefix}repo`;
        const result = (0, cloc_functions_1.buildOutfileName)('', repoFolder, prefix, undefined);
        (0, chai_1.expect)(result).to.equal(expected);
    });
    it('should use the current working directory name as the base folder name if repoFolder is "."', () => {
        const prefix = 'prefix_';
        const postfix = '_postfix';
        const expected = `${prefix}${thisFolderName}${postfix}`;
        const result = (0, cloc_functions_1.buildOutfileName)('', '.', prefix, postfix);
        (0, chai_1.expect)(result).to.equal(expected);
    });
    it('should use the current working directory name as the base folder name if repoFolder is "."', () => {
        const prefix = 'prefix_';
        const postfix = '_postfix';
        const expected = `${prefix}${thisFolderName}${postfix}`;
        const result = (0, cloc_functions_1.buildOutfileName)('', './', prefix, postfix);
        (0, chai_1.expect)(result).to.equal(expected);
    });
    it('should use the current working directory name as the base folder name if repoFolder is an empty string', () => {
        const prefix = 'prefix_';
        const postfix = '_postfix';
        const expected = `${prefix}${thisFolderName}${postfix}`;
        const result = (0, cloc_functions_1.buildOutfileName)('', '', prefix, postfix);
        (0, chai_1.expect)(result).to.equal(expected);
    });
});
//# sourceMappingURL=cloc.functions.spec.js.map