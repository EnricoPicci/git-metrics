"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const path_1 = __importDefault(require("path"));
const rxjs_1 = require("rxjs");
const load_commits_1 = require("../load/load-commits");
const load_files_1 = require("../load/load-files");
const mongo_author_churn_report_1 = require("./mongo-author-churn-report");
describe(`mongoAuthorChurnReport`, () => {
    it(`generates the report about the churn generated by the authors as well as the general project info`, (done) => {
        const repoName = 'a-git-repo-with-one-star-author';
        const repoFolderPath = `./test-data/${repoName}`;
        const commitLogPath = path_1.default.join(process.cwd(), `/test-data/output/${repoName}-commits.gitlog`);
        const clocLogPath = path_1.default.join(process.cwd(), `/test-data/output/${repoName}-cloc.gitlog`);
        const connectionString = 'mongodb://localhost:27017';
        // first load the commits
        (0, load_commits_1.loadAllCommits)(commitLogPath, connectionString, repoName, null, 2, clocLogPath)
            .pipe(
        // then augment the files with their creation date
        (0, rxjs_1.concatMap)(({ connectionString, dbName, commitsCollection: commitCollection }) => (0, load_files_1.addAllFilesWithCreationDate)(connectionString, dbName, commitCollection)), 
        // then generate the report
        (0, rxjs_1.concatMap)(({ connectionString, dbName, filesCollection, commitsCollection }) => {
            const outDir = `${process.cwd()}/temp`;
            return (0, mongo_author_churn_report_1.mongoAuthorChurnReportWithProjectInfo)({
                repoFolderPath,
                outDir,
                connectionString,
                dbName,
                commitsCollection,
                filesCollection,
            });
        }), (0, rxjs_1.tap)((report) => {
            // tests on the general project info held in the report
            (0, chai_1.expect)(report.totCommits.val).equal(3);
            (0, chai_1.expect)(report.firstCommitDate.val.getFullYear()).equal(2019);
            (0, chai_1.expect)(report.lastCommitDate.val.getFullYear()).equal(2021);
            // general tests on the author churn report created
            (0, chai_1.expect)(report).not.undefined;
            (0, chai_1.expect)(report.numAuthors.val).equal(3);
            (0, chai_1.expect)(report.totChurn.val).equal(155);
            (0, chai_1.expect)(report.topAuthors.val.length).equal(3);
            (0, chai_1.expect)(report.topAuthorChurnContributors.val.length).equal(1);
        }))
            .subscribe({
            error: (err) => done(err),
            complete: () => done(),
        });
    }).timeout(200000);
});
describe(`_mongoAuthorChurnReport - test the internals of the report generation logic`, () => {
    it(`generates the report about the churn generated by authors with only 1 top author`, (done) => {
        const repoName = 'a-git-repo-with-one-star-author';
        const repoFolderPath = `./test-data/${repoName}`;
        const commitLogPath = path_1.default.join(process.cwd(), `/test-data/output/${repoName}-commits.gitlog`);
        const clocLogPath = path_1.default.join(process.cwd(), `/test-data/output/${repoName}-cloc.gitlog`);
        const connectionString = 'mongodb://localhost:27017';
        // first load the commits
        (0, load_commits_1.loadAllCommits)(commitLogPath, connectionString, repoName, null, 2, clocLogPath)
            .pipe(
        // then augment the files with their creation date
        (0, rxjs_1.concatMap)(({ connectionString, dbName, commitsCollection: commitCollection }) => (0, load_files_1.addAllFilesWithCreationDate)(connectionString, dbName, commitCollection)), 
        // then generate the report
        (0, rxjs_1.concatMap)(({ connectionString, dbName, filesCollection, commitsCollection }) => (0, mongo_author_churn_report_1._mongoAuthorChurnReport)({
            repoFolderPath,
            connectionString,
            dbName,
            filesCollection,
            commitsCollection,
            numberOfTopChurnAuthors: 1,
        })), (0, rxjs_1.tap)((report) => {
            (0, chai_1.expect)(report.topAuthors.val.length).equal(1);
        }))
            .subscribe({
            error: (err) => done(err),
            complete: () => done(),
        });
    });
    it(`generates the report about the churn generated by authors with percentage of chunk threshold is set to 95, 
    meaning that it stops counting the files that contribute to the churn after the accumulated value is higher than 95%
    In this case the top  contributors required to reach the threshold are 2 considering the distribution of churn in tha input commits log file`, (done) => {
        const repoName = 'a-git-repo-uneven-author-churn';
        const repoFolderPath = `./test-data/${repoName}`;
        const commitLogPath = path_1.default.join(process.cwd(), `/test-data/output/${repoName}-commits.gitlog`);
        const clocLogPath = path_1.default.join(process.cwd(), `/test-data/output/${repoName}-cloc.gitlog`);
        const connectionString = 'mongodb://localhost:27017';
        // first load the commits
        (0, load_commits_1.loadAllCommits)(commitLogPath, connectionString, repoName, null, 2, clocLogPath)
            .pipe(
        // then augment the files with their creation date
        (0, rxjs_1.concatMap)(({ connectionString, dbName, commitsCollection: commitCollection }) => (0, load_files_1.addAllFilesWithCreationDate)(connectionString, dbName, commitCollection)), 
        // then generate the report
        (0, rxjs_1.concatMap)(({ connectionString, dbName, filesCollection, commitsCollection }) => (0, mongo_author_churn_report_1._mongoAuthorChurnReport)({
            repoFolderPath,
            connectionString,
            dbName,
            filesCollection,
            commitsCollection,
            percentThreshold: 95,
        })), (0, rxjs_1.tap)((report) => {
            (0, chai_1.expect)(report.topAuthorChurnContributors.val.length).equal(2);
        }))
            .subscribe({
            error: (err) => done(err),
            complete: () => done(),
        });
    });
});
//# sourceMappingURL=mongo-author-churn-report.spec-mongo.js.map