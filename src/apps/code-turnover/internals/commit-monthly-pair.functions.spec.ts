import { expect } from 'chai';

import { commitMonthlyPairs, commitsMonthlyPairsForRepos } from './commit-monthly-pair.functions';
import { CommitTuple } from './commit-tuple.model';
import { CommitCompact } from '../../../git-functions/commit.model';

// #copilot - good part of the boilerplate of the test has been generated by copilot
describe('commitDiffPairs', () => {
    it('should return an object with pairs of most recent and least recent commits for each month', () => {
        const commitsByMonth: { [yearMonth: string]: CommitCompact[] } = {
            '2021-03': [{ sha: 'def', date: new Date('2021-03-01'), author: 'author1', subject: 'comment' }],
            '2021-02': [
                { sha: 'abc', date: new Date('2021-02-15'), author: 'author3', subject: 'comment' },
                { sha: '789', date: new Date('2021-02-01'), author: 'author1', subject: 'comment' },
            ],
            '2021-01': [
                { sha: '456', date: new Date('2021-01-15'), author: 'author2', subject: 'comment' },
                { sha: '123', date: new Date('2021-01-01'), author: 'author1', subject: 'comment' },
            ],
        };
        const expectedPairs: { [yearMonth: string]: CommitTuple } = {
            '2021-03': [
                { sha: 'def', date: new Date('2021-03-01'), author: 'author1', subject: 'comment' },
                { sha: 'abc', date: new Date('2021-02-15'), author: 'author3', subject: 'comment' },
            ],
            '2021-02': [
                { sha: 'abc', date: new Date('2021-02-15'), author: 'author3', subject: 'comment' },
                { sha: '456', date: new Date('2021-01-15'), author: 'author2', subject: 'comment' },
            ],
            '2021-01': [
                { sha: '456', date: new Date('2021-01-15'), author: 'author2', subject: 'comment' },
                { sha: '123', date: new Date('2021-01-01'), author: 'author1', subject: 'comment' },
            ],
        };
        const pairs = commitMonthlyPairs(commitsByMonth);
        expect(pairs).deep.equal(expectedPairs);
    });

    it('should return an object with null pairs for months with no commits', () => {
        const commitsByMonth: { [yearMonth: string]: CommitCompact[] } = {
            '2021-03': [{ sha: 'def', date: new Date('2021-03-01'), author: 'author1', subject: 'comment' }],
            '2021-02': [],
            '2021-01': [
                { sha: '456', date: new Date('2021-01-15'), author: 'author2', subject: 'comment' },
                { sha: '123', date: new Date('2021-01-01'), author: 'author1', subject: 'comment' },
            ],
        };
        const expectedPairs: { [yearMonth: string]: CommitTuple } = {
            '2021-03': [
                { sha: 'def', date: new Date('2021-03-01'), author: 'author1', subject: 'comment' },
                { sha: '456', date: new Date('2021-01-15'), author: 'author2', subject: 'comment' },
            ],
            '2021-02': null,
            '2021-01': [
                { sha: '456', date: new Date('2021-01-15'), author: 'author2', subject: 'comment' },
                { sha: '123', date: new Date('2021-01-01'), author: 'author1', subject: 'comment' },
            ],
        };
        const pairs = commitMonthlyPairs(commitsByMonth);
        expect(pairs).deep.equal(expectedPairs);
    });

    it('should return an object with null pairs for the first month with only one commit', () => {
        const commitsByMonth: { [yearMonth: string]: CommitCompact[] } = {
            '2021-03': [{ sha: 'def', date: new Date('2021-03-01'), author: 'author1', subject: 'comment' }],
            '2021-02': [{ sha: '456', date: new Date('2021-02-01'), author: 'author2', subject: 'comment' }],
            '2021-01': [{ sha: '123', date: new Date('2021-01-01'), author: 'author1', subject: 'comment' }],
        };
        const expectedPairs: { [yearMonth: string]: CommitTuple } = {
            '2021-03': [
                { sha: 'def', date: new Date('2021-03-01'), author: 'author1', subject: 'comment' },
                { sha: '456', date: new Date('2021-02-01'), author: 'author2', subject: 'comment' },
            ],
            '2021-02': [
                { sha: '456', date: new Date('2021-02-01'), author: 'author2', subject: 'comment' },
                { sha: '123', date: new Date('2021-01-01'), author: 'author1', subject: 'comment' },
            ],
            '2021-01': null,
        };
        const pairs = commitMonthlyPairs(commitsByMonth);
        expect(pairs).deep.equal(expectedPairs);
    });

    it('works even if the order of the commits is not from the most recent to the least recent', () => {
        const commitsByMonth: { [yearMonth: string]: CommitCompact[] } = {
            '2021-03': [{ sha: 'def', date: new Date('2021-03-01'), author: 'author1', subject: 'comment' }],
            '2021-02': [
                // in this case, the order of the commits is not from the least recent to the most recent
                { sha: '789', date: new Date('2021-02-01'), author: 'author1', subject: 'comment' },
                { sha: 'abc', date: new Date('2021-02-15'), author: 'author3', subject: 'comment' },
            ],
            '2021-01': [
                { sha: '456', date: new Date('2021-01-15'), author: 'author2', subject: 'comment' },
                { sha: '123', date: new Date('2021-01-01'), author: 'author1', subject: 'comment' },
            ],
        };
        const expectedPairs: { [yearMonth: string]: CommitTuple } = {
            '2021-03': [
                { sha: 'def', date: new Date('2021-03-01'), author: 'author1', subject: 'comment' },
                { sha: 'abc', date: new Date('2021-02-15'), author: 'author3', subject: 'comment' },
            ],
            '2021-02': [
                { sha: 'abc', date: new Date('2021-02-15'), author: 'author3', subject: 'comment' },
                { sha: '456', date: new Date('2021-01-15'), author: 'author2', subject: 'comment' },
            ],
            '2021-01': [
                { sha: '456', date: new Date('2021-01-15'), author: 'author2', subject: 'comment' },
                { sha: '123', date: new Date('2021-01-01'), author: 'author1', subject: 'comment' },
            ],
        };
        const pairs = commitMonthlyPairs(commitsByMonth);
        expect(pairs).deep.equal(expectedPairs);
    });

    it('works even if the order of the keys of the dictionary is not from the most recent to the least recent', () => {
        const commitsByMonth: { [yearMonth: string]: CommitCompact[] } = {
            // in this case, the olderst month is inserted first
            '2021-01': [
                { sha: '456', date: new Date('2021-01-15'), author: 'author2', subject: 'comment' },
                { sha: '123', date: new Date('2021-01-01'), author: 'author1', subject: 'comment' },
            ],
            '2021-03': [{ sha: 'def', date: new Date('2021-03-01'), author: 'author1', subject: 'comment' }],
            '2021-02': [
                // in this case, the order of the commits is not from the least recent to the most recent
                { sha: '789', date: new Date('2021-02-01'), author: 'author1', subject: 'comment' },
                { sha: 'abc', date: new Date('2021-02-15'), author: 'author3', subject: 'comment' },
            ],
        };
        const expectedPairs: { [yearMonth: string]: CommitTuple } = {
            '2021-03': [
                { sha: 'def', date: new Date('2021-03-01'), author: 'author1', subject: 'comment' },
                { sha: 'abc', date: new Date('2021-02-15'), author: 'author3', subject: 'comment' },
            ],
            '2021-02': [
                { sha: 'abc', date: new Date('2021-02-15'), author: 'author3', subject: 'comment' },
                { sha: '456', date: new Date('2021-01-15'), author: 'author2', subject: 'comment' },
            ],
            '2021-01': [
                { sha: '456', date: new Date('2021-01-15'), author: 'author2', subject: 'comment' },
                { sha: '123', date: new Date('2021-01-01'), author: 'author1', subject: 'comment' },
            ],
        };
        const pairs = commitMonthlyPairs(commitsByMonth);
        expect(pairs).deep.equal(expectedPairs);
    });
});

describe('reposCommitsPairsDiff', () => {
    it(`should return an array of objects with name of the repo and an array of pairs of most recent and least recent commits 
    for each month`, () => {
        const commitsByMonthRepo_1: { [yearMonth: string]: CommitCompact[] } = {
            '2021-03': [{ sha: 'def_1', date: new Date('2021-03-01'), author: 'author1', subject: 'comment' }],
            '2021-02': [
                { sha: 'abc_1', date: new Date('2021-02-15'), author: 'author3', subject: 'comment' },
                { sha: '789_1', date: new Date('2021-02-01'), author: 'author1', subject: 'comment' },
            ],
            '2021-01': [
                { sha: '456_1', date: new Date('2021-01-15'), author: 'author2', subject: 'comment' },
                { sha: '123_1', date: new Date('2021-01-01'), author: 'author1', subject: 'comment' },
            ],
        };
        const commitsByMonthRepo_2: { [yearMonth: string]: CommitCompact[] } = {
            '2021-03': [{ sha: 'def_2', date: new Date('2021-03-01'), author: 'author1', subject: 'comment' }],
            '2021-02': [
                { sha: 'abc_2', date: new Date('2021-02-15'), author: 'author3', subject: 'comment' },
                { sha: '789_2', date: new Date('2021-02-01'), author: 'author1', subject: 'comment' },
            ],
            '2021-01': [
                { sha: '456_2', date: new Date('2021-01-15'), author: 'author2', subject: 'comment' },
                { sha: '123_2', date: new Date('2021-01-01'), author: 'author1', subject: 'comment' },
            ],
        };
        const repoDictWithCommits: { [repoName: string]: { [yearMonth: string]: CommitCompact[] } } = {
            repo_1: commitsByMonthRepo_1,
            repo_2: commitsByMonthRepo_2,
        };

        const expectedPairs_repo_1: { [yearMonth: string]: CommitTuple } = {
            '2021-03': [
                { sha: 'def_1', date: new Date('2021-03-01'), author: 'author1', subject: 'comment' },
                { sha: 'abc_1', date: new Date('2021-02-15'), author: 'author3', subject: 'comment' },
            ],
            '2021-02': [
                { sha: 'abc_1', date: new Date('2021-02-15'), author: 'author3', subject: 'comment' },
                { sha: '456_1', date: new Date('2021-01-15'), author: 'author2', subject: 'comment' },
            ],
            '2021-01': [
                { sha: '456_1', date: new Date('2021-01-15'), author: 'author2', subject: 'comment' },
                { sha: '123_1', date: new Date('2021-01-01'), author: 'author1', subject: 'comment' },
            ],
        };
        const expectedPairs_repo_2: { [yearMonth: string]: CommitTuple } = {
            '2021-03': [
                { sha: 'def_2', date: new Date('2021-03-01'), author: 'author1', subject: 'comment' },
                { sha: 'abc_2', date: new Date('2021-02-15'), author: 'author3', subject: 'comment' },
            ],
            '2021-02': [
                { sha: 'abc_2', date: new Date('2021-02-15'), author: 'author3', subject: 'comment' },
                { sha: '456_2', date: new Date('2021-01-15'), author: 'author2', subject: 'comment' },
            ],
            '2021-01': [
                { sha: '456_2', date: new Date('2021-01-15'), author: 'author2', subject: 'comment' },
                { sha: '123_2', date: new Date('2021-01-01'), author: 'author1', subject: 'comment' },
            ],
        };
        const expectedRepoDictPairs = [
            { repoPath: 'repo_1', commitPairs: expectedPairs_repo_1 },
            { repoPath: 'repo_2', commitPairs: expectedPairs_repo_2 },
        ];
        const repoDictPairs = commitsMonthlyPairsForRepos(repoDictWithCommits);
        expect(repoDictPairs).deep.equal(expectedRepoDictPairs);
    });
});
