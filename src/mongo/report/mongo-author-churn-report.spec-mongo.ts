import { expect } from 'chai';
import path from 'path';
import { concatMap, tap } from 'rxjs';
import { loadAllCommits } from '../load/load-commits';
import { addAllFilesWithCreationDate } from '../load/load-files';
import { mongoAuthorChurnReportWithProjectInfo, _mongoAuthorChurnReport } from './mongo-author-churn-report';

describe(`mongoAuthorChurnReport`, () => {
    it(`generates the report about the churn generated by the authors as well as the general project info`, (done) => {
        const repoName = 'a-git-repo-with-one-star-author';
        const repoFolderPath = `./test-data/${repoName}`;
        const commitLogPath = path.join(process.cwd(), `/test-data/output/${repoName}-commits.gitlog`);
        const clocLogPath = path.join(process.cwd(), `/test-data/output/${repoName}-cloc.gitlog`);
        const connectionString = 'mongodb://localhost:27017';

        // first load the commits
        loadAllCommits(commitLogPath, connectionString, repoName, null, 2, clocLogPath)
            .pipe(
                // then augment the files with their creation date
                concatMap(({ connectionString, dbName, commitsCollection: commitCollection }) =>
                    addAllFilesWithCreationDate(connectionString, dbName, commitCollection),
                ),
                // then generate the report
                concatMap(({ connectionString, dbName, filesCollection, commitsCollection }) => {
                    const outDir = `${process.cwd()}/temp`;
                    return mongoAuthorChurnReportWithProjectInfo({
                        repoFolderPath,
                        outDir,
                        connectionString,
                        dbName,
                        commitsCollection,
                        filesCollection,
                    });
                }),
                tap((report) => {
                    // tests on the general project info held in the report
                    expect(report.totCommits.val).equal(3);
                    expect(report.firstCommitDate.val.getFullYear()).equal(2019);
                    expect(report.lastCommitDate.val.getFullYear()).equal(2021);
                    // general tests on the author churn report created
                    expect(report).not.undefined;
                    expect(report.numAuthors.val).equal(3);
                    expect(report.totChurn.val).equal(155);
                    expect(report.topAuthors.val.length).equal(3);
                    expect(report.topAuthorChurnContributors.val.length).equal(1);
                }),
            )
            .subscribe({
                error: (err) => done(err),
                complete: () => done(),
            });
    }).timeout(20000);
});

describe(`_mongoAuthorChurnReport - test the internals of the report generation logic`, () => {
    it(`generates the report about the churn generated by authors with only 1 top author`, (done) => {
        const repoName = 'a-git-repo-with-one-star-author';
        const repoFolderPath = `./test-data/${repoName}`;
        const commitLogPath = path.join(process.cwd(), `/test-data/output/${repoName}-commits.gitlog`);
        const clocLogPath = path.join(process.cwd(), `/test-data/output/${repoName}-cloc.gitlog`);
        const connectionString = 'mongodb://localhost:27017';

        // first load the commits
        loadAllCommits(commitLogPath, connectionString, repoName, null, 2, clocLogPath)
            .pipe(
                // then augment the files with their creation date
                concatMap(({ connectionString, dbName, commitsCollection: commitCollection }) =>
                    addAllFilesWithCreationDate(connectionString, dbName, commitCollection),
                ),
                // then generate the report
                concatMap(({ connectionString, dbName, filesCollection, commitsCollection }) =>
                    _mongoAuthorChurnReport({
                        repoFolderPath,
                        connectionString,
                        dbName,
                        filesCollection,
                        commitsCollection,
                        numberOfTopChurnAuthors: 1,
                    }),
                ),
                tap((report) => {
                    expect(report.topAuthors.val.length).equal(1);
                }),
            )
            .subscribe({
                error: (err) => done(err),
                complete: () => done(),
            });
    });
    it(`generates the report about the churn generated by authors with percentage of chunk threshold is set to 95, 
    meaning that it stops counting the files that contribute to the churn after the accumulated value is higher than 95%
    In this case the top  contributors required to reach the threshold are 2 considering the distribution of churn in tha input commits log file`, (done) => {
        const repoName = 'a-git-repo-uneven-author-churn';
        const repoFolderPath = `./test-data/${repoName}`;
        const commitLogPath = path.join(process.cwd(), `/test-data/output/${repoName}-commits.gitlog`);
        const clocLogPath = path.join(process.cwd(), `/test-data/output/${repoName}-cloc.gitlog`);
        const connectionString = 'mongodb://localhost:27017';

        // first load the commits
        loadAllCommits(commitLogPath, connectionString, repoName, null, 2, clocLogPath)
            .pipe(
                // then augment the files with their creation date
                concatMap(({ connectionString, dbName, commitsCollection: commitCollection }) =>
                    addAllFilesWithCreationDate(connectionString, dbName, commitCollection),
                ),
                // then generate the report
                concatMap(({ connectionString, dbName, filesCollection, commitsCollection }) =>
                    _mongoAuthorChurnReport({
                        repoFolderPath,
                        connectionString,
                        dbName,
                        filesCollection,
                        commitsCollection,
                        percentThreshold: 95,
                    }),
                ),
                tap((report) => {
                    expect(report.topAuthorChurnContributors.val.length).equal(2);
                }),
            )
            .subscribe({
                error: (err) => done(err),
                complete: () => done(),
            });
    });
});
