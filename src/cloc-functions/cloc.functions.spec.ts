import { expect } from 'chai';
import { buildOutfileName, clocSummary$, writeClocByFile$, writeClocSummary } from './cloc.functions';
import { ClocParams } from './cloc-params';
import path from 'path';
import { deleteFile } from '../tools/test-helpers/delete-file';
import { concatMap, tap } from 'rxjs';
import { readLinesObs } from 'observable-fs';

// #copilot - most of the boilerplate of these tests was generated by copilot
describe('clocSummary$', () => {
    it('should return an array of language statistics', (done) => {
        clocSummary$('./src').subscribe((stats) => {
            expect(stats instanceof Array).to.be.true;
            expect(stats.length).greaterThan(0);
            expect(!!stats[0].language).to.be.true;
            expect(stats[0].nFiles).greaterThan(0);
            expect(stats[0].blank).greaterThan(0);
            expect(stats[0].comment).greaterThan(0);
            expect(stats[0].code).greaterThan(0);
            done();
        });
    }).timeout(10000);

    it('should return statistics for TypeScript files', (done) => {
        clocSummary$('./src').subscribe((stats) => {
            const typescriptStats = stats.find((stat) => stat.language === 'TypeScript');
            expect(!!typescriptStats).to.be.true;
            expect(typescriptStats!.nFiles).greaterThan(0);
            expect(typescriptStats!.blank).greaterThan(0);
            expect(typescriptStats!.comment).greaterThan(0);
            expect(typescriptStats!.code).greaterThan(0);
            done();
        });
    }).timeout(10000);

    it('should return statistics reading from a git repo commit - the commit is from the repo of this project', (done) => {
        clocSummary$('2c6f2ae87b539590f5a0f93682f5440ca845bc9c').subscribe((stats) => {
            const typescriptStats = stats.find((stat) => stat.language === 'TypeScript');
            expect(!!typescriptStats).to.be.true;
            expect(typescriptStats!.nFiles).greaterThan(0);
            expect(typescriptStats!.blank).greaterThan(0);
            expect(typescriptStats!.comment).greaterThan(0);
            expect(typescriptStats!.code).greaterThan(0);
            done();
        });
    }).timeout(10000);
});

describe('buildOutfileName', () => {

    const thisFolderName = 'git-metrics';

    it('should return the provided output file name if it is provided', () => {
        const outFile = 'output.txt';
        const result = buildOutfileName(outFile);
        expect(result).to.equal(outFile);
    });

    it('should generate an output file name based on the provided parameters', () => {
        const prefix = 'prefix_';
        const repoFolder = '/path/to/repo';
        const postfix = '_postfix';
        const expected = `${prefix}repo${postfix}`;
        const result = buildOutfileName('', repoFolder, prefix, postfix);
        expect(result).to.equal(expected);
    });

    it('should use the current working directory name as the base folder name since repo folder is not passed as param', () => {
        const prefix = 'prefix_';
        const postfix = '_postfix';
        const expected = `${prefix}${thisFolderName}${postfix}`;
        const result = buildOutfileName('', '', prefix, postfix);
        expect(result).to.equal(expected);
    });

    it('should use an empty string as the prefix if prefix is not provided', () => {
        const repoFolder = '/path/to/repo';
        const postfix = '_postfix';
        const expected = `repo${postfix}`;
        const result = buildOutfileName('', repoFolder, undefined, postfix);
        expect(result).to.equal(expected);
    });

    it('should use an empty string as the postfix if postfix is not provided', () => {
        const prefix = 'prefix_';
        const repoFolder = '/path/to/repo';
        const expected = `${prefix}repo`;
        const result = buildOutfileName('', repoFolder, prefix, undefined);
        expect(result).to.equal(expected);
    });

    it('should use the current working directory name as the base folder name if repoFolder is "."', () => {
        const prefix = 'prefix_';
        const postfix = '_postfix';
        const expected = `${prefix}${thisFolderName}${postfix}`;
        const result = buildOutfileName('', '.', prefix, postfix);
        expect(result).to.equal(expected);
    });

    it('should use the current working directory name as the base folder name if repoFolder is "."', () => {
        const prefix = 'prefix_';
        const postfix = '_postfix';
        const expected = `${prefix}${thisFolderName}${postfix}`;
        const result = buildOutfileName('', './', prefix, postfix);
        expect(result).to.equal(expected);
    });

    it('should use the current working directory name as the base folder name if repoFolder is an empty string', () => {
        const prefix = 'prefix_';
        const postfix = '_postfix';
        const expected = `${prefix}${thisFolderName}${postfix}`;
        const result = buildOutfileName('', '', prefix, postfix);
        expect(result).to.equal(expected);
    });
});

describe(`writeClocByFile$`, () => {
    it(`read the number of lines for each file from the folder named as the repo and saves them in a file - works in a new process`, (done) => {
        const repo = 'git-repo-with-code';
        const outDir = path.join(process.cwd(), './temp');

        const outClocFilePrefix = 'new-process';
        const config: ClocParams = {
            folderPath: `./test-data/${repo}`,
            outDir,
            outClocFilePrefix,
        };

        const expectedOutFilePath = outDir + '/' + outClocFilePrefix + repo + '-cloc-byfile.csv';

        let counter = 0;

        deleteFile(expectedOutFilePath)
            .pipe(
                concatMap(() => writeClocByFile$(config, 'test')),
                tap({
                    next: (returnedOutFilePath) => {
                        expect(returnedOutFilePath).equal(expectedOutFilePath);
                        counter++;
                    },
                }),
                concatMap((returnedOutFilePath) => readLinesObs(returnedOutFilePath)),
                tap({
                    next: (lines) => {
                        expect(lines).not.undefined;
                        // there are 5 lines: 3 for the 3 files and 1 for the csv header, which is the first, and one for the sum which is the last
                        expect(lines.length).equal(5);
                        const _fileName = './hallo.java';
                        const [language, filename, blank, comment, code] = lines
                            .find((l) => l.includes(_fileName))!
                            .split(',');
                        expect(language).equal('Java');
                        expect(filename).equal(`${_fileName}`);
                        expect(parseInt(blank)).equal(3);
                        expect(parseInt(comment)).equal(1);
                        expect(parseInt(code)).equal(5);
                    },
                }),
            )
            .subscribe({
                error: (err) => done(err),
                complete: () => {
                    expect(counter).equal(1);
                    done();
                },
            });
    }).timeout(200000);
});

describe(`writeClocSummary`, () => {
    it(`read the summary view provided by cloc from the folder named as the repo and saves it in a file`, (done) => {
        const repo = 'git-repo-with-code';
        const outDir = path.join(process.cwd(), './temp');
        const config: ClocParams = {
            folderPath: `./test-data/${repo}`,
            outDir,
        };
        const expectedOutFilePath = path.join(outDir, `${repo}-cloc-summary.csv`);
        const returnedOutFilePath = writeClocSummary(config, 'test');
        expect(returnedOutFilePath).equal(expectedOutFilePath);
        readLinesObs(returnedOutFilePath).subscribe({
            next: (lines) => {
                expect(lines).not.undefined;
                // there are 4 lines: 2 for the 2 languages (java nd python) and 1 for the csv header, which is the first,
                // and one for the sum which is the last
                expect(lines.length).equal(4);
                const _language = 'Java';
                const [files, language, blank, comment, code] = lines.find((l) => l.includes(_language))!.split(',');
                expect(language).equal('Java');
                expect(parseInt(files)).equal(2);
                expect(parseInt(blank)).equal(3);
                expect(parseInt(comment)).equal(3);
                expect(parseInt(code)).equal(10);
            },
            error: (err) => done(err),
            complete: () => done(),
        });
    }).timeout(200000);
});

describe(`clocSummary$`, () => {
    it(`read the cloc summary and notifies each line containing stats for a language over a stream`, (done) => {
        const repo = 'git-repo-with-code';
        const folderPath = `./test-data/${repo}`;

        clocSummary$(folderPath)
            .pipe(
                tap({
                    next: (stats) => {
                        // there are 2 languages in the repo, Java and Python, and a summary line is present in the stats
                        expect(stats.length).equal(3);

                        const javaStats = stats.find((stat) => stat.language === 'Java');
                        expect(javaStats).to.be.not.undefined;
                        expect(javaStats!.nFiles).equal(2);

                        const pythonStats = stats.find((stat) => stat.language === 'Python');
                        expect(pythonStats).to.be.not.undefined;
                        expect(pythonStats!.nFiles).equal(1);
                        expect(pythonStats!.code).equal(1);
                        expect(pythonStats!.blank).equal(0);
                        expect(pythonStats!.comment).equal(0);

                        const summaryStats = stats.find((stat) => stat.language === 'SUM');
                        expect(summaryStats).to.be.not.undefined;
                        expect(summaryStats!.nFiles).equal(3);
                    },
                }),
            )
            .subscribe({
                error: (err) => {
                    done(err);
                },
                complete: () => done(),
            });
    }).timeout(200000);

    it(`read the cloc summary and, while notifying over a streams, writes the summary in a file`, (done) => {
        const repo = 'git-repo-with-code';
        const folderPath = `./test-data/${repo}`;

        const clocSummaryFile = path.join(process.cwd(), './temp', `${repo}-cloc-summary.csv`);

        clocSummary$(folderPath, undefined, clocSummaryFile)
            .pipe(
                concatMap(() => readLinesObs(clocSummaryFile)),
                tap({
                    next: (clocSummaryines) => {
                        // there are 4 lines, one header, 2 for the languages (Java and Python) and one for the sum
                        expect(clocSummaryines.length).equal(4);

                        const javaStats = clocSummaryines.find((line) => line.includes('Java'));
                        expect(javaStats).to.be.not.undefined;
                        const pythonStats = clocSummaryines.find((line) => line.includes('Python'));
                        expect(pythonStats).to.be.not.undefined;
                        const summaryStats = clocSummaryines.find((line) => line.includes('SUM'));
                        expect(summaryStats).to.be.not.undefined;
                    },
                }),
            )
            .subscribe({
                error: (err) => {
                    done(err);
                },
                complete: () => done(),
            });
    }).timeout(200000);

    it(`tries to run cloc summary on a folder that does not exist and returns an empty array`, (done) => {
        clocSummary$('not-existing-folder').subscribe({
            next: (stats) => {
                expect(stats).empty;
            },
            error: (err) => done(err),
            complete: () => done(),
        });
    });
});